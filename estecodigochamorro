#include <iostream>
using namespace std;

// Definimos la estructura de un nodo
struct Nodo {
    int datos;      // Almacenamos el valor en el nodo
    Nodo* izquierda;  // Puntero izquierdo
    Nodo* derecha;    // Puntero derecho
};

// Puntero a la raíz del árbol
Nodo* raiz = NULL;

// Función para crear un nuevo nodo
Nodo* crear_nodo(int datos) {
    Nodo* nodo = new Nodo;
    nodo->datos = datos;  // Asignamos el valor al nodo
    nodo->izquierda = NULL;  // Inicializamos el puntero izquierdo como NULL
    nodo->derecha = NULL;    // Inicializamos el puntero derecho como NULL
    return nodo;  
}

// Función para insertar un nodo en el árbol
Nodo* insertar(Nodo* raiz, int datos) {
    if (raiz == NULL) {
        return crear_nodo(datos);  // Si el nodo es NULL, entonces vamos a creamos un nuevo nodo
    } else {
        if (datos < raiz->datos) {
            raiz->izquierda = insertar(raiz->izquierda, datos);  // Insertamos a la izquierda si el valor es menor
        } else {
            raiz->derecha = insertar(raiz->derecha, datos);  // Insertamos a la derecha si el valor es mayor o igual
        }
        
    }
}

// Función para mostrar el árbol (recorrido en orden)
void mostrar(Nodo* raiz, int cont) {
    if (raiz == NULL) {
        cout<<"el arbol esta vacio"<<endl;  // Si el nodo es NULL, no hacemos nada
    } else {
        mostrar(raiz->derecha, cont + 1);  // Llamada recursiva al subárbol derecho
        for (int i = 0; i < cont; i++) {
            cout << "\t";  // Imprimimos tabulaciones para la indentación
        }
        cout << raiz->datos << "\n";  // Imprimimos el valor del nodo
        mostrar(raiz->izquierda, cont + 1);  // Llamada recursiva al subárbol izquierdo
    }
}

// esto es para contar el número de ramas 
int contarRamas(Nodo* nodo) {
    if (nodo == NULL) {
        return 0;  // Si el nodo es NULL, dejamos un mensaje
    }
    return 1 + contarRamas(nodo->izquierda) + contarRamas(nodo->derecha);  // Contamos el nodo actual y sus ramas
}

// Función para contar los niveles del árbol (profundidad máxima)
int contarNiveles(Nodo* nodo) {
    if (nodo == NULL) {
        return 0;
    }
    int izquierda = contarNiveles(nodo->izquierda);  // Contamos los niveles del subárbol izquierdo
    int derecha = contarNiveles(nodo->derecha);  // Contamos los niveles del subárbol derecho
    return 1 + max(izquierda, derecha);  // El número de niveles es el máximo de los dos subárboles + 1
}

// Función para calcular el peso del árbol (suma de los valores de los nodos)
int calcularPeso(Nodo* nodo) {
    if (nodo == NULL) {
        return 0;
    }
    return nodo->datos + calcularPeso(nodo->izquierda) + calcularPeso(nodo->derecha);  // Sumamos el valor del nodo y los valores de los hijos
}

int main() {
    int opcion;
    bool seguir = true;  // estos sirve para tener un control en el bucle principal.

    cout << "Bienvenidos al programa del árbol binario" << endl;

    do {
        cout << "Seleccione una opcion:" << endl;
        cout << "[1] Insertar un número" << endl;
        cout << "[2] Ver el árbol" << endl;
        cout << "[3] Ver el número de ramas" << endl;
        cout << "[4] Ver el número de hojas" << endl;
        cout << "[5] Ver el número de niveles" << endl;
        cout << "[6] Ver el peso del árbol" << endl;
        cout << "[7] Salir" << endl;

        cin >> opcion;  

        switch (opcion) {
            case 1: {
                int valor;
                cout << "Ingrese un número: ";
                cin >> valor;  
                raiz = insertar(raiz, valor);  // Insertamos el número en el árbol
                break;
            }
            case 2:
                mostrar(raiz, 0);  // Mostramos el árbol, empezando desde la raíz (cont=0)
                cout << endl;
                break;
            case 3:
                cout << "Número de ramas: " << contarRamas(raiz) << endl;  // Mostramos el número de ramas
                break;
            case 4:
                cout << "No se pudo realizar el codigo " << endl; 
                break;
            case 5:
                cout << "Número de niveles: " << contarNiveles(raiz) << endl;  // Mostramos el número de niveles
                break;
            case 6:
                cout << "Peso del árbol: " << calcularPeso(raiz) << endl;  // Mostramos el peso del árbol
                break;
            case 7:
                cout << "Saliendo del programa..." << endl;
                seguir = false;  // Terminamos el bucle
                break;
            default:
                cout << "Opción no válida, intente nuevamente." << endl;  // Si la opción no es válida
                break;
        }

    } while (seguir);
}
